generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator enums {
  provider = "tsx ./prisma/enum-generator.ts"
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  address   String
  dob       DateTime @map("date_of_birth")
  phone     String
  age       Int
  gender    Gender

  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model Pharmacist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  address   String
  dob       DateTime @map("date_of_birth")
  phone     String
  age       Int
  gender    Gender

  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pharmacist")
}

model Doctor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  address   String
  dob       DateTime @map("date_of_birth")
  phone     String
  age       Int
  gender    Gender

  specialization String
  qualification  String

  email    String @unique
  password String

  prescriptions Prescription[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@map("doctor")
}

model Patient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  address   String
  dob       DateTime @map("date_of_birth")
  phone     String
  age       Int
  gender    Gender

  height Float
  weight Float

  email    String @unique
  password String

  prescriptions Prescription[]
  orders        Order[]
  appointments  Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient")
}

model Medication {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  brand                String
  dosage               String
  name                 String
  price                Float
  quantity             Int
  unit                 String
  type                 String
  prescriptionRequired Boolean @default(false)

  prescriptions PrescribedMedication[]

  orders MedicationOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medication")
}

model Appointment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  prescription Prescription?

  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  patientId String  @db.ObjectId

  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctorId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointment")
}

model Prescription {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  startDate  DateTime
  expiryDate DateTime

  medications PrescribedMedication[]

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @db.ObjectId

  doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String? @db.ObjectId

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appointmentId String      @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prescription")
}

model PrescribedMedication {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  dosage           Int
  durationNumber   Int
  durationUnit     String
  frequency        String
  frequencyTimings Int[]
  remarks          String?
  timing           String
  unit             String
  quantity         Int

  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String     @db.ObjectId

  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId String       @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prescribed_medication")
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  totalAmount Float
  payment     Payment?
  status      OrderStatus

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medications MedicationOrder[]

  @@map("order")
}

model MedicationOrder {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  brand    String
  dosage   String
  price    Float

  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String     @db.ObjectId

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medication_order")
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentMethod PaymentMethod
  amount        Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String @unique @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("payment")
}

model TableView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String
  type String
  data Json
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DoctorSpecialization {
  CARDIOLOGIST
  DERMATOLOGIST
  GYNECOLOGIST
  NEUROLOGIST
  ORTHOPEDIC
  PEDIATRICIAN
  PSYCHIATRIST
  UROLOGIST
}

enum DoctorQualification {
  MD
  MDDM
  DSO
  GENERAL_SURGEON
  GENERAL_MEDICINE
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
}

enum MedicationType {
  CAPSULE
  TABLET
  SYRUP
}

enum MedicationUnit {
  MG
  ML
}
